# -*- coding: utf-8 -*-
"""Sentimental analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LZfxvns2Xcxoo18WiYNkI9s4T0KrAcQX
"""

import numpy as np
import re
import math
import pandas as pd
from bs4 import BeautifulSoup
import tensorflow as tf
from tensorflow.keras import layers
import tensorflow_datasets as tfds

#loading data
train_data = pd.read_csv('/content/drive/My Drive/Sentiment Analysis/train.csv', engine='python')
test_data = pd.read_csv('/content/drive/My Drive/Sentiment Analysis/test.csv', engine='python')

train_data.columns = ['sentiment','id','date','query','user','text']
test_data.columns = ['sentiment','id','date','query','user','text']

train_data.drop(['id','date','query','user'], axis=1, inplace = True)
test_data.drop(['id','date','query','user'],axis=1, inplace = True)

def clean_tweet(tweet):
  tweet = BeautifulSoup(tweet,'lxml').get_text()
  tweet = re.sub(r"@[a-zA-z0-9]+",' ', tweet)
  tweet = re.sub(r"https?://[A-Za-z0-9./]+",' ', tweet)
  tweet = re.sub(r"[^a-zA-Z.:?!,']", " ", tweet)
  tweer = re.sub(r" +", " ", tweet)
  return tweet

train_clean = [clean_tweet(tweet) for tweet in train_data.text]
test_clean = [clean_tweet(tweet) for tweet in test_data.text]

train_label = train_data.sentiment.values

train_label[train_label == 4] = 1

set(train_label)

#Tokenization

tokenizer = tfds.features.text.SubwordTextEncoder.build_from_corpus(train_clean, target_vocab_size=2**16)
data_input = [tokenizer.encode(sentence) for sentence in train_clean]

#Padding
MAX_LEN = max([len(sentence) for sentence in data_input])
data_input = tf.keras.preprocessing.sequence.pad_sequences(data_input, value=0,padding='post',maxlen=MAX_LEN)

test_idx = np.random.randint(0, 800000, 8000)
test_idx = np.concatenate((test_idx, test_idx+800000))

test_inputs = data_input[test_idx]
test_labels = train_label[test_idx]
train_inputs = np.delete(data_input, test_idx, axis=0)
train_labels = np.delete(train_label, test_idx)

#Model
class DCNN(tf.keras.Model):
  def __init__(self, vocab_size, emb_dim=128, nb_filters=50, FFN_units=512, nb_class=2, dropout_rate=0.1, training=False, name="dcnn"):
    super(DCNN, self).__init__(name=name)
    self.embedding = layers.Embedding(vocab_size, emb_dim)
    self.bigram = layers.Conv1D(filters = nb_filters, kernel_size=2, padding="valid",activation="relu")
    self.pool_1 = layers.GlobalMaxPool1D()
    self.trigram = layers.Conv1D(filters = nb_filters, kernel_size=3, padding="valid",activation="relu")
    self.pool_2 = layers.GlobalMaxPool1D()
    self.fourgram = layers.Conv1D(filters = nb_filters, kernel_size=4, padding="valid",activation="relu")
    self.pool_3 = layers.GlobalMaxPool1D()
    self.dense_1 = layers.Dense(units=FFN_units, activation="relu")
    self.dropout = layers.Dropout(rate=dropout_rate)
    if nb_class == 2:
      self.last_dense = layers.Dense(units=1,activation="sigmoid")
    else:
      self.last_dense = layers.Dense(units=nb_classes,activation="softmax")
  def call(self, inputs, training):
    x = self.embedding(inputs)
    x_1 = self.bigram(x)
    x_1 = self.pool_1(x_1)
    x_2 = self.trigram(x)
    x_2 = self.pool_2(x_2)
    x_3 = self.fourgram(x)
    x_3 = self.pool_3(x_3)
    
    merged = tf.concat([x_1, x_2, x_3], axis=-1) # (batch_size, 3 * nb_filters)
    merged = self.dense_1(merged)
    merged = self.dropout(merged, training)
    output = self.last_dense(merged)
    
    return output

#APplication
VOCAB_SIZE = tokenizer.vocab_size

EMB_DIM = 200
NB_FILTERS = 100
FFN_UNITS = 256
NB_CLASSES = len(set(train_label))

DROPOUT_RATE = 0.2

BATCH_SIZE = 32
NB_EPOCHS = 5

#Training
Dcnn = DCNN(vocab_size=VOCAB_SIZE,emb_dim=EMB_DIM,nb_filters=NB_FILTERS,FFN_units=FFN_UNITS,nb_class=NB_CLASSES,dropout_rate=DROPOUT_RATE)

if NB_CLASSES == 2:
    Dcnn.compile(loss="binary_crossentropy",optimizer="adam", metrics=["accuracy"])
else:
    Dcnn.compile(loss="sparse_categorical_crossentropy",optimizer="adam",metrics=["sparse_categorical_accuracy"])

checkpoint_path = "/content/drive/My Drive/Sentiment Analysis/ckpt/"

ckpt = tf.train.Checkpoint(Dcnn=Dcnn)

ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)

if ckpt_manager.latest_checkpoint:
    ckpt.restore(ckpt_manager.latest_checkpoint)
    print("Latest checkpoint restored!!")

Dcnn.fit(train_inputs,train_labels,batch_size=BATCH_SIZE,epochs=NB_EPOCHS)
ckpt_manager.save()

results = Dcnn.evaluate(test_inputs, test_labels, batch_size=BATCH_SIZE)
print(results)

Dcnn(np.array([tokenizer.encode("bad teacher")]), training=False).numpy()

tokenizer.encode("bad")

